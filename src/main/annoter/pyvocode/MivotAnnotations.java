package main.annoter.pyvocode;

import java.util.*;
import java.io.File;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Element;
import org.w3c.dom.Document;

import main.utils.XMLUtils;

public class MivotAnnotations {
    private static final Logger logger = Logger.getLogger(MivotAnnotations.class.getName());

    private Map<String, String> models;
    private boolean reportStatus;
    private String reportMessage;
    private List<String> globals;
    private List<String> templates;
    private String templatesId;
    private List<String> dmids;
    private String mivotBlock;

    public MivotAnnotations() {
        this.models = new LinkedHashMap<>();
        this.reportStatus = true;
        this.reportMessage = "Generated by mivot writer";
        this.globals = new ArrayList<>();
        this.templates = new ArrayList<>();
        this.templatesId = "";
        this.dmids = new ArrayList<>();
        this.mivotBlock = "";
    }

    public String getMivotBlock() {
        return this.mivotBlock;
    }

    private String getReport() {
        String status = reportStatus ? "OK" : "FAILED";
        return "<REPORT status=\"" + status + "\">" + reportMessage + "</REPORT>";
    }

    private String getModels() {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, String> entry : models.entrySet()) {
            if (entry.getValue() != null && !entry.getValue().isEmpty()) {
                sb.append("<MODEL name=\"").append(entry.getKey())
                  .append("\" url=\"").append(entry.getValue()).append("\" />\n");
            } else {
                sb.append("<MODEL name=\"").append(entry.getKey()).append("\" />\n");
            }
        }
        return sb.toString();
    }

    private String getGlobals() {
        StringBuilder sb = new StringBuilder("<GLOBALS>\n");
        for (String g : globals) {
            sb.append(g).append("\n");
        }
        sb.append("</GLOBALS>\n");
        return sb.toString();
    }

    private String getTemplates() {
        if (templates.isEmpty()) return "";

        StringBuilder sb = new StringBuilder();
        if (templatesId != null && !templatesId.isEmpty()) {
            sb.append("<TEMPLATES tableref=\"").append(templatesId).append("\">\n");
        } else {
            sb.append("<TEMPLATES>\n");
        }

        for (String t : templates) {
            sb.append(t).append("\n");
        }
        sb.append("</TEMPLATES>\n");
        return sb.toString();
    }

    public void buildMivotBlock(String templatesId, boolean schemaCheck) throws Exception {
        if (templatesId != null) {
            this.templatesId = templatesId;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("<VODML xmlns=\"http://www.ivoa.net/xml/mivot\">\n");
        sb.append(getReport()).append("\n");
        sb.append(getModels()).append("\n");
        sb.append(getGlobals()).append("\n");
        sb.append(getTemplates()).append("\n");
        sb.append("</VODML>");

        this.mivotBlock = XmlUtils.prettyFormat(sb.toString());

        if (schemaCheck) {
            checkXml();
        }
    }

    public void addTemplates(Object instance) throws Exception {
        if (instance instanceof MivotInstance) {
            MivotInstance mi = (MivotInstance) instance;
            templates.add(mi.xmlString());
            if (mi.getDmid() != null) dmids.add(mi.getDmid());
        } else if (instance instanceof String) {
            templates.add((String) instance);
        } else {
            throw new Exception("Invalid type for templates instance");
        }
    }

    public void addGlobals(Object instance) throws Exception {
        if (instance instanceof MivotInstance) {
            MivotInstance mi = (MivotInstance) instance;
            globals.add(mi.xmlString());
            if (mi.getDmid() != null) dmids.add(mi.getDmid());
        } else if (instance instanceof String) {
            globals.add((String) instance);
        } else {
            throw new Exception("Invalid type for globals instance");
        }
    }

    public void addModel(String name, String url) {
        models.put(name, url);
    }

    public void setReport(boolean status, String message) {
        this.reportStatus = status;
        this.reportMessage = message;
        if (!status) {
            globals.clear();
            templates.clear();
        }
    }

    public void checkXml() throws Exception {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            dbFactory.setNamespaceAware(true);
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(new java.io.ByteArrayInputStream(mivotBlock.getBytes()));

            // Schema validation could be added here (e.g., using javax.xml.validation.Schema)
            // This is a placeholder for schema validation logic.
            logger.info("XML parsed successfully (schema validation not implemented).");
        } catch (Exception e) {
            throw new Exception("XML validation failed: " + e.getMessage());
        }
    }
}
